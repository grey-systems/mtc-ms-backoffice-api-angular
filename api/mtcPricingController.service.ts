/**
 * mtc-backoffice-api
 * MTC Backoffice Composite Api
 *
 * OpenAPI spec version: 0.1.0-SNAPSHOT
 * Contact: developers@greysystems.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CountryZone } from '../model/countryZone';
import { CreatePolicy } from '../model/createPolicy';
import { CreateRule } from '../model/createRule';
import { Policy } from '../model/policy';
import { RestError } from '../model/restError';
import { Rule } from '../model/rule';
import { RuleParamDescriptor } from '../model/ruleParamDescriptor';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MtcPricingControllerService {

    protected basePath = 'https://mtc-ms-backoffice-api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * addCountryZoneMembersBySchemeAndId
     * 
     * @param scheme scheme
     * @param id id
     * @param iso iso
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addCountryZoneMembersBySchemeAndIdUsingPOST(scheme: string, id: number, iso: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addCountryZoneMembersBySchemeAndIdUsingPOST(scheme: string, id: number, iso: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addCountryZoneMembersBySchemeAndIdUsingPOST(scheme: string, id: number, iso: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addCountryZoneMembersBySchemeAndIdUsingPOST(scheme: string, id: number, iso: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling addCountryZoneMembersBySchemeAndIdUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addCountryZoneMembersBySchemeAndIdUsingPOST.');
        }

        if (iso === null || iso === undefined) {
            throw new Error('Required parameter iso was null or undefined when calling addCountryZoneMembersBySchemeAndIdUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/pricing/schemes/${encodeURIComponent(String(scheme))}/country-zones/${encodeURIComponent(String(id))}/members/${encodeURIComponent(String(iso))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createPolicyBySchemeAndRuleId
     * 
     * @param scheme scheme
     * @param ruleId ruleId
     * @param policy policy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createPolicyBySchemeAndRuleIdUsingPOST(scheme: string, ruleId: number, policy: CreatePolicy, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public createPolicyBySchemeAndRuleIdUsingPOST(scheme: string, ruleId: number, policy: CreatePolicy, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public createPolicyBySchemeAndRuleIdUsingPOST(scheme: string, ruleId: number, policy: CreatePolicy, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public createPolicyBySchemeAndRuleIdUsingPOST(scheme: string, ruleId: number, policy: CreatePolicy, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling createPolicyBySchemeAndRuleIdUsingPOST.');
        }

        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling createPolicyBySchemeAndRuleIdUsingPOST.');
        }

        if (policy === null || policy === undefined) {
            throw new Error('Required parameter policy was null or undefined when calling createPolicyBySchemeAndRuleIdUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<number>(`${this.basePath}/pricing/schemes/${encodeURIComponent(String(scheme))}/rules/${encodeURIComponent(String(ruleId))}/policies`,
            policy,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createRuleBySchemeAndTypeAndCcy
     * 
     * @param scheme scheme
     * @param type type
     * @param localCcy localCcy
     * @param createRule createRule
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createRuleBySchemeAndTypeAndCcyUsingPOST(scheme: string, type: string, localCcy: string, createRule: CreateRule, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public createRuleBySchemeAndTypeAndCcyUsingPOST(scheme: string, type: string, localCcy: string, createRule: CreateRule, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public createRuleBySchemeAndTypeAndCcyUsingPOST(scheme: string, type: string, localCcy: string, createRule: CreateRule, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public createRuleBySchemeAndTypeAndCcyUsingPOST(scheme: string, type: string, localCcy: string, createRule: CreateRule, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling createRuleBySchemeAndTypeAndCcyUsingPOST.');
        }

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling createRuleBySchemeAndTypeAndCcyUsingPOST.');
        }

        if (localCcy === null || localCcy === undefined) {
            throw new Error('Required parameter localCcy was null or undefined when calling createRuleBySchemeAndTypeAndCcyUsingPOST.');
        }

        if (createRule === null || createRule === undefined) {
            throw new Error('Required parameter createRule was null or undefined when calling createRuleBySchemeAndTypeAndCcyUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<number>(`${this.basePath}/pricing/schemes/${encodeURIComponent(String(scheme))}/rules/types/${encodeURIComponent(String(type))}/ccy/${encodeURIComponent(String(localCcy))}`,
            createRule,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteCountryZoneMembersBySchemeAndId
     * 
     * @param scheme scheme
     * @param id id
     * @param iso iso
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCountryZoneMembersBySchemeAndIdUsingDELETE(scheme: string, id: number, iso: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteCountryZoneMembersBySchemeAndIdUsingDELETE(scheme: string, id: number, iso: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteCountryZoneMembersBySchemeAndIdUsingDELETE(scheme: string, id: number, iso: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteCountryZoneMembersBySchemeAndIdUsingDELETE(scheme: string, id: number, iso: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling deleteCountryZoneMembersBySchemeAndIdUsingDELETE.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteCountryZoneMembersBySchemeAndIdUsingDELETE.');
        }

        if (iso === null || iso === undefined) {
            throw new Error('Required parameter iso was null or undefined when calling deleteCountryZoneMembersBySchemeAndIdUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/pricing/schemes/${encodeURIComponent(String(scheme))}/country-zones/${encodeURIComponent(String(id))}/members/${encodeURIComponent(String(iso))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deletePolicyBySchemeAndId
     * 
     * @param scheme scheme
     * @param ruleId ruleId
     * @param policyId policyId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePolicyBySchemeAndIdUsingDELETE(scheme: string, ruleId: number, policyId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deletePolicyBySchemeAndIdUsingDELETE(scheme: string, ruleId: number, policyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deletePolicyBySchemeAndIdUsingDELETE(scheme: string, ruleId: number, policyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deletePolicyBySchemeAndIdUsingDELETE(scheme: string, ruleId: number, policyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling deletePolicyBySchemeAndIdUsingDELETE.');
        }

        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling deletePolicyBySchemeAndIdUsingDELETE.');
        }

        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling deletePolicyBySchemeAndIdUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/pricing/schemes/${encodeURIComponent(String(scheme))}/rules/${encodeURIComponent(String(ruleId))}/policies/${encodeURIComponent(String(policyId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteRuleBySchemaAndId
     * 
     * @param scheme scheme
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteRuleBySchemaAndIdUsingDELETE(scheme: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteRuleBySchemaAndIdUsingDELETE(scheme: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteRuleBySchemaAndIdUsingDELETE(scheme: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteRuleBySchemaAndIdUsingDELETE(scheme: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling deleteRuleBySchemaAndIdUsingDELETE.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteRuleBySchemaAndIdUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/pricing/schemes/${encodeURIComponent(String(scheme))}/rules/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCountryZoneBySchemeAndId
     * 
     * @param scheme scheme
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCountryZoneBySchemeAndIdUsingGET(scheme: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<CountryZone>;
    public getCountryZoneBySchemeAndIdUsingGET(scheme: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountryZone>>;
    public getCountryZoneBySchemeAndIdUsingGET(scheme: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountryZone>>;
    public getCountryZoneBySchemeAndIdUsingGET(scheme: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling getCountryZoneBySchemeAndIdUsingGET.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCountryZoneBySchemeAndIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CountryZone>(`${this.basePath}/pricing/schemes/${encodeURIComponent(String(scheme))}/country-zones/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCountryZoneMembersByBySchemeAndId
     * 
     * @param scheme scheme
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCountryZoneMembersByBySchemeAndIdUsingGET(scheme: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public getCountryZoneMembersByBySchemeAndIdUsingGET(scheme: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public getCountryZoneMembersByBySchemeAndIdUsingGET(scheme: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public getCountryZoneMembersByBySchemeAndIdUsingGET(scheme: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling getCountryZoneMembersByBySchemeAndIdUsingGET.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCountryZoneMembersByBySchemeAndIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<string>>(`${this.basePath}/pricing/schemes/${encodeURIComponent(String(scheme))}/country-zones/${encodeURIComponent(String(id))}/members`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCountryZonesBySchemeAndTypeOfRule
     * 
     * @param scheme scheme
     * @param type type
     * @param internal internal
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCountryZonesBySchemeAndTypeOfRuleUsingGET(scheme: string, type: string, internal?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<CountryZone>>;
    public getCountryZonesBySchemeAndTypeOfRuleUsingGET(scheme: string, type: string, internal?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CountryZone>>>;
    public getCountryZonesBySchemeAndTypeOfRuleUsingGET(scheme: string, type: string, internal?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CountryZone>>>;
    public getCountryZonesBySchemeAndTypeOfRuleUsingGET(scheme: string, type: string, internal?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling getCountryZonesBySchemeAndTypeOfRuleUsingGET.');
        }

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getCountryZonesBySchemeAndTypeOfRuleUsingGET.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (internal !== undefined && internal !== null) {
            queryParameters = queryParameters.set('internal', <any>internal);
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<CountryZone>>(`${this.basePath}/pricing/schemes/${encodeURIComponent(String(scheme))}/country-zones/rule-type/${encodeURIComponent(String(type))}${encodeURIComponent(String(internal))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPoliciesBySchemeAndRuleId
     * 
     * @param scheme scheme
     * @param ruleId ruleId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPoliciesBySchemeAndRuleIdUsingGET(scheme: string, ruleId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Policy>>;
    public getPoliciesBySchemeAndRuleIdUsingGET(scheme: string, ruleId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Policy>>>;
    public getPoliciesBySchemeAndRuleIdUsingGET(scheme: string, ruleId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Policy>>>;
    public getPoliciesBySchemeAndRuleIdUsingGET(scheme: string, ruleId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling getPoliciesBySchemeAndRuleIdUsingGET.');
        }

        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling getPoliciesBySchemeAndRuleIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Policy>>(`${this.basePath}/pricing/schemes/${encodeURIComponent(String(scheme))}/rules/${encodeURIComponent(String(ruleId))}/policies`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getRuleBySchemeAnRuleTypeAndCcy
     * 
     * @param scheme scheme
     * @param type type
     * @param localCcy localCcy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRuleBySchemeAnRuleTypeAndCcyUsingGET(scheme: string, type: string, localCcy: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Rule>>;
    public getRuleBySchemeAnRuleTypeAndCcyUsingGET(scheme: string, type: string, localCcy: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Rule>>>;
    public getRuleBySchemeAnRuleTypeAndCcyUsingGET(scheme: string, type: string, localCcy: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Rule>>>;
    public getRuleBySchemeAnRuleTypeAndCcyUsingGET(scheme: string, type: string, localCcy: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling getRuleBySchemeAnRuleTypeAndCcyUsingGET.');
        }

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getRuleBySchemeAnRuleTypeAndCcyUsingGET.');
        }

        if (localCcy === null || localCcy === undefined) {
            throw new Error('Required parameter localCcy was null or undefined when calling getRuleBySchemeAnRuleTypeAndCcyUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Rule>>(`${this.basePath}/pricing/schemes/${encodeURIComponent(String(scheme))}/rules/types/${encodeURIComponent(String(type))}/ccy/${encodeURIComponent(String(localCcy))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getRuleScheme
     * 
     * @param scheme scheme
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRuleSchemeUsingGET(scheme: string, observe?: 'body', reportProgress?: boolean): Observable<Array<RuleParamDescriptor>>;
    public getRuleSchemeUsingGET(scheme: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RuleParamDescriptor>>>;
    public getRuleSchemeUsingGET(scheme: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RuleParamDescriptor>>>;
    public getRuleSchemeUsingGET(scheme: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling getRuleSchemeUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<RuleParamDescriptor>>(`${this.basePath}/pricing/schemes/${encodeURIComponent(String(scheme))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updatePolicyBySchemeAndRuleId
     * 
     * @param scheme scheme
     * @param ruleId ruleId
     * @param policyId policyId
     * @param policy policy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updatePolicyBySchemeAndRuleIdUsingPUT(scheme: string, ruleId: number, policyId: number, policy: CreatePolicy, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updatePolicyBySchemeAndRuleIdUsingPUT(scheme: string, ruleId: number, policyId: number, policy: CreatePolicy, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updatePolicyBySchemeAndRuleIdUsingPUT(scheme: string, ruleId: number, policyId: number, policy: CreatePolicy, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updatePolicyBySchemeAndRuleIdUsingPUT(scheme: string, ruleId: number, policyId: number, policy: CreatePolicy, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (scheme === null || scheme === undefined) {
            throw new Error('Required parameter scheme was null or undefined when calling updatePolicyBySchemeAndRuleIdUsingPUT.');
        }

        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling updatePolicyBySchemeAndRuleIdUsingPUT.');
        }

        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling updatePolicyBySchemeAndRuleIdUsingPUT.');
        }

        if (policy === null || policy === undefined) {
            throw new Error('Required parameter policy was null or undefined when calling updatePolicyBySchemeAndRuleIdUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/pricing/schemes/${encodeURIComponent(String(scheme))}/rules/${encodeURIComponent(String(ruleId))}/policies/${encodeURIComponent(String(policyId))}`,
            policy,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

/**
 * mtc-backoffice-api
 * MTC Backoffice Composite Api
 *
 * OpenAPI spec version: 0.1.0-SNAPSHOT
 * Contact: developers@greysystems.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Beneficiary } from '../model/beneficiary';
import { CreateCustomerRequest } from '../model/createCustomerRequest';
import { Customer } from '../model/customer';
import { CustomerBasicData } from '../model/customerBasicData';
import { CustomerEssentialData } from '../model/customerEssentialData';
import { Note } from '../model/note';
import { NoteCreation } from '../model/noteCreation';
import { PaginatedResultSearchCustomerResponse } from '../model/paginatedResultSearchCustomerResponse';
import { RestError } from '../model/restError';
import { SearchCustomerRequest } from '../model/searchCustomerRequest';
import { TheFullIdentityDocumentInformation } from '../model/theFullIdentityDocumentInformation';
import { TheIdentityDocument } from '../model/theIdentityDocument';
import { UpdateCustomerRequest } from '../model/updateCustomerRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MtcCustomerControllerService {

    protected basePath = 'https://mtc-ms-backoffice-api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createCustomerIdentityDocumentFile
     * 
     * @param id id
     * @param idDoc idDoc
     * @param file file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createCustomerIdentityDocumentFileUsingPOST(id: number, idDoc: number, file: Blob, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public createCustomerIdentityDocumentFileUsingPOST(id: number, idDoc: number, file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public createCustomerIdentityDocumentFileUsingPOST(id: number, idDoc: number, file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public createCustomerIdentityDocumentFileUsingPOST(id: number, idDoc: number, file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createCustomerIdentityDocumentFileUsingPOST.');
        }

        if (idDoc === null || idDoc === undefined) {
            throw new Error('Required parameter idDoc was null or undefined when calling createCustomerIdentityDocumentFileUsingPOST.');
        }

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling createCustomerIdentityDocumentFileUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<string>(`${this.basePath}/customer/${encodeURIComponent(String(id))}/idDoc/${encodeURIComponent(String(idDoc))}/file`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createCustomerIdentityDocument
     * 
     * @param id id
     * @param identityDocumentDetail identityDocumentDetail
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createCustomerIdentityDocumentUsingPOST(id: number, identityDocumentDetail: TheFullIdentityDocumentInformation, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public createCustomerIdentityDocumentUsingPOST(id: number, identityDocumentDetail: TheFullIdentityDocumentInformation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public createCustomerIdentityDocumentUsingPOST(id: number, identityDocumentDetail: TheFullIdentityDocumentInformation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public createCustomerIdentityDocumentUsingPOST(id: number, identityDocumentDetail: TheFullIdentityDocumentInformation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createCustomerIdentityDocumentUsingPOST.');
        }

        if (identityDocumentDetail === null || identityDocumentDetail === undefined) {
            throw new Error('Required parameter identityDocumentDetail was null or undefined when calling createCustomerIdentityDocumentUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<number>(`${this.basePath}/customer/${encodeURIComponent(String(id))}/idDoc`,
            identityDocumentDetail,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createCustomerNote
     * 
     * @param id id
     * @param creationNote creationNote
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createCustomerNoteUsingPOST(id: number, creationNote: NoteCreation, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public createCustomerNoteUsingPOST(id: number, creationNote: NoteCreation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public createCustomerNoteUsingPOST(id: number, creationNote: NoteCreation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public createCustomerNoteUsingPOST(id: number, creationNote: NoteCreation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createCustomerNoteUsingPOST.');
        }

        if (creationNote === null || creationNote === undefined) {
            throw new Error('Required parameter creationNote was null or undefined when calling createCustomerNoteUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<number>(`${this.basePath}/customer/${encodeURIComponent(String(id))}/note`,
            creationNote,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createCustomer
     * 
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createCustomerUsingPOST(request: CreateCustomerRequest, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public createCustomerUsingPOST(request: CreateCustomerRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public createCustomerUsingPOST(request: CreateCustomerRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public createCustomerUsingPOST(request: CreateCustomerRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling createCustomerUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<number>(`${this.basePath}/customer`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCustomerEssentialDataByIds
     * 
     * @param ids ids
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCustomerEssentialDataByIdsUsingGET(ids: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<Array<CustomerEssentialData>>;
    public getCustomerEssentialDataByIdsUsingGET(ids: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CustomerEssentialData>>>;
    public getCustomerEssentialDataByIdsUsingGET(ids: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CustomerEssentialData>>>;
    public getCustomerEssentialDataByIdsUsingGET(ids: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling getCustomerEssentialDataByIdsUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (ids) {
            ids.forEach((element) => {
                queryParameters = queryParameters.append('ids', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<CustomerEssentialData>>(`${this.basePath}/customer${encodeURIComponent(String(ids))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCustomerEssentialData
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCustomerEssentialDataUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CustomerBasicData>;
    public getCustomerEssentialDataUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CustomerBasicData>>;
    public getCustomerEssentialDataUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CustomerBasicData>>;
    public getCustomerEssentialDataUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCustomerEssentialDataUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CustomerBasicData>(`${this.basePath}/customer/${encodeURIComponent(String(id))}/essential`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCustomerFullData
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCustomerFullDataUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<Customer>;
    public getCustomerFullDataUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Customer>>;
    public getCustomerFullDataUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Customer>>;
    public getCustomerFullDataUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCustomerFullDataUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Customer>(`${this.basePath}/customer/${encodeURIComponent(String(id))}/full`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCustomerIdentityDocumentById
     * 
     * @param id id
     * @param idDoc idDoc
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCustomerIdentityDocumentByIdUsingGET(id: number, idDoc: number, observe?: 'body', reportProgress?: boolean): Observable<TheIdentityDocument>;
    public getCustomerIdentityDocumentByIdUsingGET(id: number, idDoc: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TheIdentityDocument>>;
    public getCustomerIdentityDocumentByIdUsingGET(id: number, idDoc: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TheIdentityDocument>>;
    public getCustomerIdentityDocumentByIdUsingGET(id: number, idDoc: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCustomerIdentityDocumentByIdUsingGET.');
        }

        if (idDoc === null || idDoc === undefined) {
            throw new Error('Required parameter idDoc was null or undefined when calling getCustomerIdentityDocumentByIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<TheIdentityDocument>(`${this.basePath}/customer/${encodeURIComponent(String(id))}/idDoc/${encodeURIComponent(String(idDoc))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCustomerIdentityDocumentFileById
     * 
     * @param id id
     * @param idDoc idDoc
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCustomerIdentityDocumentFileByIdUsingGET(id: number, idDoc: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getCustomerIdentityDocumentFileByIdUsingGET(id: number, idDoc: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getCustomerIdentityDocumentFileByIdUsingGET(id: number, idDoc: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getCustomerIdentityDocumentFileByIdUsingGET(id: number, idDoc: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCustomerIdentityDocumentFileByIdUsingGET.');
        }

        if (idDoc === null || idDoc === undefined) {
            throw new Error('Required parameter idDoc was null or undefined when calling getCustomerIdentityDocumentFileByIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/customer/${encodeURIComponent(String(id))}/idDoc/${encodeURIComponent(String(idDoc))}/file`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCustomerIdentityDocuments
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCustomerIdentityDocumentsUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TheIdentityDocument>>;
    public getCustomerIdentityDocumentsUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TheIdentityDocument>>>;
    public getCustomerIdentityDocumentsUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TheIdentityDocument>>>;
    public getCustomerIdentityDocumentsUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCustomerIdentityDocumentsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<TheIdentityDocument>>(`${this.basePath}/customer/${encodeURIComponent(String(id))}/idDoc`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchBeneficiariesByOwner
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchBeneficiariesByOwnerUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Beneficiary>>;
    public searchBeneficiariesByOwnerUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Beneficiary>>>;
    public searchBeneficiariesByOwnerUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Beneficiary>>>;
    public searchBeneficiariesByOwnerUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling searchBeneficiariesByOwnerUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Beneficiary>>(`${this.basePath}/customer/${encodeURIComponent(String(id))}/beneficiaries`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchCustomers
     * 
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchCustomersUsingPOST(request: SearchCustomerRequest, observe?: 'body', reportProgress?: boolean): Observable<PaginatedResultSearchCustomerResponse>;
    public searchCustomersUsingPOST(request: SearchCustomerRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginatedResultSearchCustomerResponse>>;
    public searchCustomersUsingPOST(request: SearchCustomerRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginatedResultSearchCustomerResponse>>;
    public searchCustomersUsingPOST(request: SearchCustomerRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling searchCustomersUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PaginatedResultSearchCustomerResponse>(`${this.basePath}/customer/search`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchNotesByCustomerId
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchNotesByCustomerIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Note>>;
    public searchNotesByCustomerIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Note>>>;
    public searchNotesByCustomerIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Note>>>;
    public searchNotesByCustomerIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling searchNotesByCustomerIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Note>>(`${this.basePath}/customer/${encodeURIComponent(String(id))}/note`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateCustomerIdentityDocument
     * 
     * @param id id
     * @param idDoc idDoc
     * @param identityDocumentDetail identityDocumentDetail
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCustomerIdentityDocumentUsingPUT(id: number, idDoc: number, identityDocumentDetail: TheFullIdentityDocumentInformation, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public updateCustomerIdentityDocumentUsingPUT(id: number, idDoc: number, identityDocumentDetail: TheFullIdentityDocumentInformation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public updateCustomerIdentityDocumentUsingPUT(id: number, idDoc: number, identityDocumentDetail: TheFullIdentityDocumentInformation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public updateCustomerIdentityDocumentUsingPUT(id: number, idDoc: number, identityDocumentDetail: TheFullIdentityDocumentInformation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCustomerIdentityDocumentUsingPUT.');
        }

        if (idDoc === null || idDoc === undefined) {
            throw new Error('Required parameter idDoc was null or undefined when calling updateCustomerIdentityDocumentUsingPUT.');
        }

        if (identityDocumentDetail === null || identityDocumentDetail === undefined) {
            throw new Error('Required parameter identityDocumentDetail was null or undefined when calling updateCustomerIdentityDocumentUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<number>(`${this.basePath}/customer/${encodeURIComponent(String(id))}/idDoc/${encodeURIComponent(String(idDoc))}`,
            identityDocumentDetail,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateCustomer
     * 
     * @param id id
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCustomerUsingPUT(id: number, request: UpdateCustomerRequest, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public updateCustomerUsingPUT(id: number, request: UpdateCustomerRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public updateCustomerUsingPUT(id: number, request: UpdateCustomerRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public updateCustomerUsingPUT(id: number, request: UpdateCustomerRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCustomerUsingPUT.');
        }

        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateCustomerUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<number>(`${this.basePath}/customer/${encodeURIComponent(String(id))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
